7.1 An abundant number is a number for which the sum of its proper divisors is greater than the number itself. Proper divisors of the number are those that are strictly lesser than the number
code:
def abundant(n):
    s=0
    for i in range(1,n):
        if n%i==0:
            s=s+i
    if s>n:
        return "Yes"
    return "No"
    
7.2 An automorphic number is a number whose square ends with the number itself. For example, 5 is an automorphic number because 5*5 =25. The last digit is 5 which same as the given number. 
code:
def automorphic(n):
    s=n*n
    p=len(str(n))*10
    if s%p==n:
        return "Automorphic"
    return "Not Automorphic"
    
7.3 Write a code to check whether product of digits at even places is divisible by sum of digits at odd place of a positive integer
code:
def productDigits(n):
    n=list(str(n))
    n=[int(i) for i in n]
    s=0
    p=1
    
    for j in range(0,len(n)):
        if j%2==0:
            s=s+n[j]
        else:
            p=p*n[j]
    if p%s==0:
        return True
    else:
        return False

7.4 An e-commerce company plans to give their customers a special discount for Christmas.
They are planning to offer a flat discount. The discount value is calculated as the sum of all the prime digits in the total bill amount.
Write an python code to find the discount value for the given total bill amount.
code:
def christmasDiscount(n):
    n=list(str(n))
    s=0
    n=[int(i) for i in n]
    for j in n:
        d=isprime(j)
        if d==1:
            s=s+j
    return s

def isprime(n):
    for i in range(2,(n//2)+1):
        if n%i==0:
            return 0
    return 1

7.5 complete function to implement coin change making problem i.e. finding the minimum
number of coins of certain denominations that add up to given amount of money.
The only available coins are of values 1, 2, 3, 4
code:
def coinChange(n):
    if n==1 or n==2 or n==3 or n==4:
        return 1
    if n==0:
        return 0
    return n//4 + coinChange(n%4)

7.6 Given a number with maximum of 100 digits as input, find the difference between the sum of odd and even position digits.
code:
def differenceSum(n):
    e=0
    o=0
    s=str(n)
    for i in range(0,len(s)):
        if i%2==0:
            o=o+int(s[i])
        else:
            e=e+int(s[i])
    return (abs(e-o))

7.7 A number is considered to be ugly if its only prime factors are 2, 3 or 5.
[1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, â€¦] is the sequence of ugly numbers.
code:
def checkUgly(n):
    if n<=0:
        return "not ugly"
    if n in [1,2,3,5]:
        return "ugly"
        
    for i in [2,3,5]:
        if n%i==0:
            
            return checkUgly(n//i)
    return "not ugly"

